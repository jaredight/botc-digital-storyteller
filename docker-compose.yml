
services:
  # Backend Flask API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: botc-backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=sqlite:///src/database/app.db
    volumes:
      - backend_data:/app/src/database
    ports:
      - "5000:5000"
    networks:
      - botc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/roles"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: botc-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on: [backend]
    # condition: service_healthy # failing healthcheck
    networks:
      - botc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session storage (optional, for production scaling)
  redis:
    image: redis:7-alpine
    container_name: botc-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - botc-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: botc-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-botc}
      - POSTGRES_USER=${POSTGRES_USER:-botc_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change_this_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - botc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-botc_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  backend_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  botc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

